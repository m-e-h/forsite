<?xml version="1.0"?>
<ruleset name="MehStandard">
	<description>A custom set of rules for WP dev.</description>
	<rule ref="VariableAnalysis"/>
	<rule ref="ImportDetection"/>
	<rule ref="WordPress-Core"/>
    <rule ref="NeutronStandard"/>

	<!-- Exclude patterns -->
	<exclude-pattern>/vendor/*</exclude-pattern>
	<exclude-pattern>/node_modules/*</exclude-pattern>
	<exclude-pattern>/tests/*</exclude-pattern>

	<!-- Only check the PHP files. -->
	<arg name="extensions" value="php"/>

	<!-- VariableAnalysis -->
	<rule ref="VariableAnalysis.CodeAnalysis.VariableAnalysis.UndefinedVariable">
		<type>error</type>
	</rule>
	<rule ref="VariableAnalysis.CodeAnalysis.VariableAnalysis">
		<properties>
			<property name="allowUnusedCaughtExceptions" value="true"/>
		</properties>
	</rule>

	<!-- ImportDetection -->
	<rule ref="ImportDetection.Imports.RequireImports.Import">
		<type>error</type>
	</rule>
	<rule ref="ImportDetection.Imports.RequireImports">
		<properties>
			<property name="ignoreGlobalsWhenInGlobalScope" value="true"/>
			<property name="ignoreWordPressSymbols" value="true"/>
		</properties>
	</rule>

	<!-- WordPress-Core -->
	<rule ref="WordPress.PHP.DevelopmentFunctions">
		<severity>0</severity>
	</rule>
	<rule ref="WordPress.PHP.DevelopmentFunctions.error_log_var_export">
		<severity>0</severity>
	</rule>
	<rule ref="WordPress.PHP.YodaConditions.NotYoda">
		<severity>0</severity>
	</rule>
	<rule ref="WordPress.PHP.StrictInArray.MissingTrueStrict">
		<type>error</type>
	</rule>
	<rule ref="WordPress.PHP.StrictComparisons.LooseComparison">
		<type>error</type>
	</rule>
	<rule ref="WordPress.PHP.DisallowShortTernary">
		<severity>0</severity>
	</rule>
	<rule ref="WordPress.NamingConventions.ValidFunctionName.MethodNameInvalid">
		<severity>0</severity>
	</rule>
	<rule ref="WordPress.NamingConventions.ValidHookName.UseUnderscores">
		<severity>0</severity>
	</rule>
	<rule ref="WordPress.Arrays.MultipleStatementAlignment.DoubleArrowNotAligned">
		<severity>0</severity>
	</rule>
	<rule ref="WordPress.Arrays.ArrayDeclarationSpacing.AssociativeArrayFound">
		<type>warning</type>
	</rule>
	<rule ref="WordPress.WhiteSpace.ControlStructureSpacing.NoSpaceAfterCloseParenthesis">
		<severity>0</severity>
	</rule>
	<rule ref="WordPress.WhiteSpace.ControlStructureSpacing.NoSpaceAfterCloseParenthesis">
		<severity>0</severity>
	</rule>
	<rule ref="WordPress.DB.DirectDatabaseQuery.NoCaching">
		<severity>0</severity>
	</rule>
	<rule ref="WordPress.DB.DirectDatabaseQuery.DirectQuery">
		<severity>0</severity>
	</rule>
	<rule ref="WordPress.DB.PreparedSQL.NotPrepared">
		<type>warning</type>
	</rule>
	<rule ref="WordPress.WP.EnqueuedResourceParameters.MissingVersion">
		<severity>0</severity>
	</rule>
	<rule ref="WordPress.WP.AlternativeFunctions.file_get_contents_file_get_contents">
		<severity>0</severity>
	</rule>
	<rule ref="WordPress.Files.FileName">
		<severity>0</severity>
	</rule>
	<rule ref="WordPress.Security.EscapeOutput.OutputNotEscaped">
		<severity>0</severity>
	</rule>
	<rule ref="WordPress.WP.I18n.MissingTranslatorsComment">
		<severity>0</severity>
	</rule>

	<!-- NeutronStandard -->
	<rule ref="NeutronStandard.StrictTypes.RequireStrictTypes.StrictTypes">
		<type>warning</type>
	</rule>
	<rule ref="NeutronStandard.Functions.TypeHint.NoArgumentType">
		<severity>0</severity>
	</rule>

	<!-- Generic -->
	<rule ref="Generic.Formatting.MultipleStatementAlignment.NotSameWarning">
		<severity>0</severity>
	</rule>
	<rule ref="Generic.Functions.OpeningFunctionBraceKernighanRitchie.ContentAfterBrace">
		<severity>0</severity>
	</rule>
	<rule ref="Generic.Arrays.DisallowShortArraySyntax">
		<severity>0</severity>
	</rule>
	<rule ref="Generic.PHP.DisallowShortOpenTag">
		<severity>0</severity>
	</rule>
	<rule ref="Generic.Commenting.DocComment.MissingShort">
		<severity>0</severity>
	</rule>
	<rule ref="Generic.Commenting.DocComment.SpacingBeforeTags">
		<severity>0</severity>
	</rule>

	<!-- Squiz -->
	<rule ref="Squiz.Commenting">
		<severity>0</severity>
	</rule>
	<rule ref="Squiz.ControlStructures.ControlSignature.NewlineAfterOpenBrace">
		<severity>0</severity>
	</rule>

	<!-- PEAR -->
	<rule ref="PEAR.Functions.FunctionCallSignature.MultipleArguments">
		<severity>0</severity>
	</rule>

</ruleset>
